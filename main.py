import logging

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from message_handler import message_handler
from config import BOT_TOKEN # Bot token
from config import REQUIRED_CHANNELS
from config import CHANNEL_BUTTONS
from telegram import InlineKeyboardButton, InlineKeyboardMarkup


# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    subscribed = True
    for channel in REQUIRED_CHANNELS:
        chat_member = await context.bot.get_chat_member(channel, user.id)
        if chat_member.status == 'left':
            subscribed = False
            break
    if subscribed:
        await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç {user.first_name}, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã-—Å–ø–æ–Ω—Å–æ—Ä—ã –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ ü§ñ. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ Instagram!')
    else:
        keyboard = []
        for channel in REQUIRED_CHANNELS:
            keyboard.append([InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url=f'https://t.me/{channel[1:]}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∏–º –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=reply_markup)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    subscribed = True
    for channel in REQUIRED_CHANNELS:
        chat_member = await context.bot.get_chat_member(channel, user.id)
        if chat_member.status == 'left':
            subscribed = False
            break
    if subscribed:
        await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç {user.first_name}, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã-—Å–ø–æ–Ω—Å–æ—Ä—ã –∏ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ ü§ñ')
    else:
        keyboard = []
        for channel, button_text in CHANNEL_BUTTONS.items():
            keyboard.append([InlineKeyboardButton(button_text, url=f'https://t.me/{channel[1:]}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã. –ë–ª–∞–≥–æ–¥–∞—Ä—è –Ω–∏–º –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /start.', reply_markup=reply_markup)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT, message_handler))
    app.run_polling()

if __name__=='__main__':
    main()